# -*- coding: utf-8 -*-
"""MovieRecommand.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I2kbOj4_VbaDpWoSmbYoRdUz6HFuECay

Importing Dependencies
"""

import pandas as pd
import numpy as np
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data Collection

"""

movies_data = pd.read_csv('/content/movies.csv')

selected_features = ['genres','keywords','tagline','cast','director']
for features in selected_features:
  movies_data[features]= movies_data[features].fillna('')

combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']

vectorizer= TfidfVectorizer()
features_vectors= vectorizer.fit_transform(combined_features)
#print(features_vectors)

"""Cosine Simalrity

"""

similarity= cosine_similarity(features_vectors)
#print(similarity)

movie_name= input("Enter a movie name: ")
list_of_all_titles= movies_data['title'].tolist()

find_close_match= difflib.get_close_matches(movie_name,list_of_all_titles)
#print(find_close_match)
close_match= find_close_match[0]
index_movie= movies_data[movies_data.title==close_match]['index'].values[0]
#print(index_movie)

similarity_score= list(enumerate(similarity[index_movie]))
#print(similarity_score)

similar_movies= sorted(similarity_score, key=lambda x:x[1], reverse=True)
#print(similar_movies)

print("Similar movies are: \n")
i=1
for movie in similar_movies:
  index=movie[0]
  title_from_index= movies_data[movies_data.index==index]['title'].values[0]
  if(i<20):
    print(i,'.',title_from_index)
    i+=1